generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String              @id @default(cuid())
  email           String              @unique
  name            String?
  password        String
  role            Role                @default(USER)
  isActive        Boolean             @default(true)
  avatar          String?
  lastLoginAt     DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  balance         Float               @default(0)
  invoices        Invoice[]
  loginHistory    LoginHistory[]
  orders          Order[]
  pteroServers    PterodactylServer[]
  services        Service[]
  sessions        Session[]
  transactions    WalletTransaction[]
  paymentSetting  PaymentSetting?
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Service {
  id          String        @id @default(cuid())
  name        String
  type        ServiceType
  status      ServiceStatus @default(PENDING)
  price       Float
  config      Json?
  ip          String?
  port        Int?
  description String?
  userId      String
  expiresAt   DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  orders      Order[]
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  storeId         String?
  serviceId       String?
  amount          Float
  status          OrderStatus @default(PENDING)
  paymentMethod   String?
  paymentProof    String?     // URL of uploaded payment proof
  adminNotes      String?     // Notes from admin/owner
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  invoices        Invoice[]
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeItem       StoreItem?  @relation(fields: [storeId], references: [id])
  service         Service?    @relation(fields: [serviceId], references: [id])
}

model PterodactylServer {
  id              String   @id @default(cuid())
  pteroId         String   @unique
  identifier      String   @unique
  name            String
  description     String?
  status          String
  suspended       Boolean  @default(false)
  limits          Json
  featureLimits   Json
  userId          String?
  nodeId          String
  allocationId    String
  allocationIp    String?
  allocationPort  Int?
  allocationAlias String?
  nestId          String
  eggId           String
  container       Json?
  cpuUsage        Float?
  memoryUsage     Int?
  memoryLimit     Int?
  diskUsage       Int?
  diskLimit       Int?
  networkRx       Int?
  networkTx       Int?
  uptime          Int?
  lastSyncAt      DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User?    @relation(fields: [userId], references: [id])
}

model ApiConfiguration {
  id          String   @id @default(cuid())
  name        String   @unique
  apiUrl      String
  apiKey      String
  isActive    Boolean  @default(true)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LoginHistory {
  id        String   @id @default(cuid())
  userId    String
  loginTime DateTime @default(now())
  ip        String
  userAgent String
  location  String?
  device    String?
  browser   String?
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([loginTime])
}

model StoreItem {
  id          String        @id @default(cuid())
  title       String        @unique
  description String?
  price       Float
  category    StoreCategory
  imageUrl    String?
  imageLink   String?
  isActive    Boolean       @default(true)
  featured    Boolean       @default(false)
  metadata    Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  orders      Order[]
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  userId        String
  orderId       String?
  title         String
  description   String?
  amount        Float
  status        InvoiceStatus @default(PENDING)
  dueDate       DateTime
  paidAt        DateTime?
  paymentMethod String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Order?        @relation(fields: [orderId], references: [id])
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WalletTransaction {
  id          String          @id @default(cuid())
  userId      String
  type        TransactionType
  amount      Float
  description String?
  balance     Float
  metadata    Json?
  createdAt   DateTime        @default(now())
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaymentSetting {
  id            String   @id @default(cuid())
  ownerUserId   String   @unique
  qrisImageUrl  String?
  qrisNumber    String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  ownerUser     User     @relation(fields: [ownerUserId], references: [id], onDelete: Cascade)
  banks         BankAccount[]
  ewallets      EWalletAccount[]
}

model BankAccount {
  id              String @id @default(cuid())
  paymentSettingId String
  bankName        String
  bankNumber      String
  bankAccount     String
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  paymentSetting  PaymentSetting @relation(fields: [paymentSettingId], references: [id], onDelete: Cascade)
}

model EWalletAccount {
  id                String @id @default(cuid())
  paymentSettingId  String
  ewalletName       String
  ewalletNumber     String
  isActive          Boolean @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  paymentSetting    PaymentSetting @relation(fields: [paymentSettingId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  OWNER
}

enum ServiceType {
  GAME_HOSTING
  RDP
  FIVEM_DEVELOPMENT
  ROBLOX_DEVELOPMENT
}

enum ServiceStatus {
  PENDING
  ACTIVE
  SUSPENDED
  CANCELLED
}

enum OrderStatus {
  PENDING
  VALIDATING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

enum TransactionType {
  TOP_UP
  PAYMENT
  REFUND
  BONUS
  PENALTY
}

enum StoreCategory {
  MOD
  GAME
  HOSTING
  SERVER
}
